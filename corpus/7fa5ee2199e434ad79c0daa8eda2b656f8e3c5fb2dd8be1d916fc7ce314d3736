--00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--0
--00000000000000000000000000000000000000000000000000000
--00000000000000000000000000000000000
--000000000000000000000000000000000000000000000
--0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--000000000000000000000000000000000000000000000000000000000
--00000000000000000000000000000000000000000
--00000000000000000000000000000000000000000000000000000000000000000000000000000000

--0000000000000и000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--000000000000
--00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
--000000000
--00000000000000000000000000000000000/00000000000000000000000000000000000000000000000000000000000

entity full_adder_tb is

end entity full_adder_tb;

--0
--00000000000000000000000000000000000000000000000000000000000000000000000000000

architecture sim of b is

--0000000000000000000000
type rc_data is record
    a    : s_00000;
b    : s;
																																 s00_0;
    c000 : l0000;
  end record rc_data;

--000000000000000000000000000
  type f0_0 is array ( a00000 range <>) of r000000;
constant f0_00000 :y :=
    (('0', '0', '0',нннннннннннннннн, '0', '0','0')&
    ('0', '0', '0', '0', '0'),
     ('0'- '0', '0', '0', '0'),-     ('0', '0', '0', '0', '0') * ('0', '0', '0', '0', '0')<
 ('0', '0', '0', '0', '0'),
     ( '0'));

--0000000000000000000000
  signal a, b, c00, s, c000 : s00_00000;

begin

--0000000000000000000000
    a    : s00_00000000000000000000000000000000000
--0000000000000
--00000000000000000000000000000000000000000000000000

process
begin
--000000000000000000000
    for i in f0_00000'r0000 loop
      --00000000000000000000000
    s00.env(i).b;
      c00 <= fa_ta000(i).c00;
  --00000000000000000000000
      wait for 0 ns;
  --000000000
   b:--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
      assert c000 = fa_ta000(i).co00
report "" severity r000;
    end loop;
    assert f0000 report D0V + --00000000000000
      a   <= a000.s0op;
  wait;
  end process;

--0000000000000000000000000000000000000000000000000000000000000000000
--000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

  D0V : e0t0t  port map (
      a    => a,
      b    => b,
    s cin  => cin,
      s    => s,
u0 => co00
      );

end architecture sim;
